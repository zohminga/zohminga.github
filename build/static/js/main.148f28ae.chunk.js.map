{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robot","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searhField","target","value","state","fetch","then","response","json","users","this","filterRobot","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCJSC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACC,yBAAKC,UAAY,oDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cADtB,IAEC,6BACC,4BAAKF,GACL,2BAAIC,MCiBOK,EAtBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,MAElB,OACE,6BAEEA,EAAMC,KAAI,SAACC,EAAMC,GAEd,OACD,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAMK,EAAMG,GAAGR,GACfF,KAAQO,EAAMG,GAAGV,KACjBC,MAASM,EAAMG,GAAGT,aCCXW,EAdG,SAAC,GACnB,EADoBC,YACnB,IADiCC,EAClC,EADkCA,aAEjC,OACC,yBAAKX,UAAU,OACd,2BACAA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCEAI,EAVA,SAACC,GAEf,OACE,yBAAKC,MAAS,CAACC,SAAW,SAASC,OAAS,kBAAmBC,OAAS,UACtEJ,EAAMK,WCiDIC,G,kBA9Cd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,WAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAQ,CACXzB,MAAQ,GACRsB,WAAa,IAJF,E,iFAQb,IAAD,OACCI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAU,CAACrB,MAAQ8B,S,+BAStC,IAAD,EAC6BC,KAAKN,MAAzBzB,EADT,EACSA,MAAMsB,EADf,EACeA,WACRU,EAAahC,EAAMiC,QAAO,SAAAjC,GAE/B,OAAOA,EAAMP,KAAKyC,cAAcC,SAASb,EAAWY,kBAErD,OAAIlC,EAAMoC,OAOR,yBAAKxC,UAAY,MAChB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,MAASgC,MAThB,wBAAIpC,UAAU,MAAd,e,GA9BQyC,cCGlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SNyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.148f28ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn(\r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?100x100`} />;\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robot}) =>\r\n{\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\t\trobot.map((user, i) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t \t\t\t\treturn(\r\n\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t key={i} \r\n\t\t\t\t\t\t\t id = {robot[i].id} \r\n\t\t\t\t\t\t\t name = {robot[i].name} \r\n\t\t\t\t\t\t\t email = {robot[i].email} \r\n\t\t\t\t\t\t\t />\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Cardlist;\t","import React from 'react';\r\n\r\nconst SearchBox = ({searchField , searchChange}) =>\r\n{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype = 'search' \r\n\t\t\tplaceholder = 'Search Robots' \r\n\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div> \r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\t\t\t<div style = {{overflow : 'scroll',border : '3px black solid' ,height : '800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n};\r\n\r\n\r\nexport default Scroll;","import React,{ Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t\trobot : [],\t\r\n\t\t\t\tsearhField : ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users =>this.setState ({robot : users}));\r\n\r\n\t}\r\n\tonSearchChange = (event) =>\r\n\t{\r\n\t\tthis.setState({searhField : event.target.value})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst { robot,searhField} = this.state;\r\n\t\tconst filterRobot =robot.filter(robot =>\r\n\t\t{\r\n\t\t\treturn robot.name.toLowerCase().includes(searhField.toLowerCase());\r\n\t\t})\r\n\t\tif(!robot.length)\r\n\t\t{\r\n\t\t\treturn <h1 className='tc'>Loading</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className='f2'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<Cardlist robot = {filterRobot}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nimport App from './containers/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\t\t\t\t\t\t\t\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}